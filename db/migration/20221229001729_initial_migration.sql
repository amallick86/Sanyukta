-- +goose Up
-- +goose StatementBegin
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS Gender (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    gender varchar UNIQUE NOT NULL);
-- +goose StatementEnd
-- +goose StatementBegin
INSERT INTO Gender (gender) VALUES('MALE'),
                                  ('Female'),
                                  ('Other');
-- +goose StatementEnd

-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS MaritalStatus (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    maritalstatus varchar UNIQUE NOT NULL
);
-- +goose StatementEnd

-- +goose StatementBegin
INSERT INTO MaritalStatus (maritalstatus) VALUES('Single'),
                                  ('Divorced'),
                                  ('Widowed');
-- +goose StatementEnd

-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS Religion (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    religion varchar UNIQUE NOT NULL
);
-- +goose StatementEnd

-- +goose StatementBegin
INSERT INTO Religion(religion) VALUES('Agnosticism'),
                                         ('Atheism'),
                                         ('Baha''i'),
                                         ('Buddhism'),
                                         ('Christianity'),
                                         ('Humanism'),
                                         ('Hinduism'),
                                         ('Islam'),
                                         ('Jainism'),
                                         ('Judaism'),
                                         ('Sikhism'),
                                         ('Zoroastrianism');
-- +goose StatementEnd

-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS Caste (
     ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
     caste varchar UNIQUE NOT NULL
);
-- +goose StatementEnd

-- +goose StatementBegin
INSERT INTO Caste(caste) VALUES ('Adibasi/Janajati'),
                                    ('Baantar'),
                                    ('Badhai'),
                                    ('Badi'),
                                    ('Bangali'),
                                    ('Baniya'),
                                    ('Barai'),
                                    ('Baramu/Bramhu'),
                                    ('Bhediyar/ Gaderi'),
                                    ('Bhote'),
                                    ('Bhujel/Gharti'),
                                    ('Bing'),
                                    ('Brahman'),
                                    ('Byansi'),
                                    ('Chamar/Harijan'),
                                    ('Chepang/Praja'),
                                    ('Chhetri'),
                                    ('Chidimar'),
                                    ('Churoute'),
                                    ('Chyantal'),
                                    ('Damai/Dholi'),
                                    ('Danuwar'),
                                    ('Darai'),
                                    ('Dhanuk'),
                                    ('Dhimal'),
                                    ('Dhobi'),
                                    ('Dhuniya'),
                                    ('Dom'),
                                    ('Dura'),
                                    ('Dushad/Paswan'),
                                    ('Gaine'),
                                    ('Gangai'),
                                    ('Gurung'),
                                    ('Halkhor'),
                                    ('Haluwai'),
                                    ('Hayu'),
                                    ('Hyalmo'),
                                    ('Jain'),
                                    ('Jhangad'),
                                    ('Jirel'),
                                    ('Kahar'),
                                    ('Kalwar'),
                                    ('Kami'),
                                    ('Kanu'),
                                    ('Kayastha'),
                                    ('Kewat'),
                                    ('Khatwe'),
                                    ('Kisan'),
                                    ('Koche'),
                                    ('Koiri'),
                                    ('Kumal'),
                                    ('Kumhar'),
                                    ('Kurmi'),
                                    ('Kusbadiya/Patharkata'),
                                    ('Kusunda'),
                                    ('Lepcha'),
                                    ('Limbu'),
                                    ('Lodha'),
                                    ('Lohar'),
                                    ('Magar'),
                                    ('Majhi'),
                                    ('Mali Kamar'),
                                    ('Mallah'),
                                    ('Marwari'),
                                    ('Meche'),
                                    ('Munda'),
                                    ('Musahar'),
                                    ('Muslim'),
                                    ('Newar'),
                                    ('Nuniya'),
                                    ('Nurang'),
                                    ('Pahari'),
                                    ('Punjabi/Sikh'),
                                    ('Rai'),
                                    ('Rajbanshi'),
                                    ('Rajbhar'),
                                    ('Raji'),
                                    ('Rajput'),
                                    ('Raute'),
                                    ('Santhal/Satar'),
                                    ('Sanyasi'),
                                    ('Sarki'),
                                    ('Sherpa'),
                                    ('Sonar'),
                                    ('Sudhi'),
                                    ('Sunuwar'),
                                    ('Tajpuriya'),
                                    ('Tamang'),
                                    ('Tatma'),
                                    ('Teli'),
                                    ('Thakali'),
                                    ('Thakur/Hazam'),
                                    ('Thakuri'),
                                    ('Thami/Thangmi'),
                                    ('Tharu'),
                                    ('Walung'),
                                    ('Yadav'),
                                    ('Yakha');
-- +goose StatementEnd

-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS HigherEducation (
   ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   education varchar UNIQUE NOT NULL
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS Profession (
                              ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                              profession varchar UNIQUE NOT NULL
);

-- +goose StatementEnd
-- +goose StatementBegin
INSERT INTO Profession (profession) VALUES
                                            ('Accountant'),
                                            ('Actor/ Actress'),
                                            ('Architect'),
                                            ('Army'),
                                            ('Artist'),
                                            ('Astronaut'),
                                            ('Baker'),
                                            ('Ballet dancer'),
                                            ('Bartender'),
                                            ('Bellboy'),
                                            ('Bishop'),
                                            ('Boxer'),
                                            ('Builder'),
                                            ('Bus driver'),
                                            ('Businessman'),
                                            ('Butcher'),
                                            ('Cameraman'),
                                            ('Caretaker'),
                                            ('Carpenter'),
                                            ('Cashier'),
                                            ('Catholic nun'),
                                            ('Chef'),
                                            ('Clown'),
                                            ('Computer programmer'),
                                            ('Construction worker'),
                                            ('Customs officer'),
                                            ('Delivery man'),
                                            ('Dentist'),
                                            ('Detective'),
                                            ('Diver'),
                                            ('Doctor'),
                                            ('Doorman'),
                                            ('Driver'),
                                            ('Electrician'),
                                            ('Engineer'),
                                            ('Entrepreneur'),
                                            ('Factory worker'),
                                            ('Farmer'),
                                            ('Fireman'),
                                            ('Flight attendant'),
                                            ('Florist'),
                                            ('Footballer'),
                                            ('Foreman'),
                                            ('Forest ranger'),
                                            ('Gardener'),
                                            ('Gas station attendant'),
                                            ('Geisha'),
                                            ('Hairdresser'),
                                            ('Housekeeper'),
                                            ('Housewife'),
                                            ('Journalist'),
                                            ('Judge'),
                                            ('Lawyer'),
                                            ('Librarian'),
                                            ('Lifeguard'),
                                            ('Lunchroom supervisor'),
                                            ('Magician'),
                                            ('Mechanic'),
                                            ('Miner'),
                                            ('Musician'),
                                            ('Nurse'),
                                            ('Office worker'),
                                            ('Optician'),
                                            ('Painter'),
                                            ('Paramedic'),
                                            ('Pharmacist'),
                                            ('Photographer'),
                                            ('Pilot'),
                                            ('Pirate'),
                                            ('Plumber'),
                                            ('Police officer'),
                                            ('Politician'),
                                            ('Pope'),
                                            ('Postman'),
                                            ('Priest'),
                                            ('Professor'),
                                            ('Real estate agent'),
                                            ('Receptionist'),
                                            ('Repairman'),
                                            ('Reporter'),
                                            ('Salesman'),
                                            ('Scientist'),
                                            ('Secretary'),
                                            ('Singer'),
                                            ('Soldier'),
                                            ('Speaker'),
                                            ('Street vendor'),
                                            ('Student'),
                                            ('Surgeon'),
                                            ('Tailor/ Seamstress'),
                                            ('Taxi driver'),
                                            ('Teacher'),
                                            ('Tour guide'),
                                            ('Train conductor'),
                                            ('Veterinarian'),
                                            ('Waiter'),
                                            ('Writer/ author');
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS Country (
                           ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                           country varchar UNIQUE NOT NULL,
                           ISO2 varchar NOT NULL
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS State (
                         ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         CountryID integer,
                         state varchar NOT NULL
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS ResidingStatus (
                                  ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                  residingstatus varchar UNIQUE NOT NULL
);
-- +goose StatementEnd
-- +goose StatementBegin
INSERT INTO ResidingStatus(residingstatus) VALUES('Citizenship'),
                                                     ('Permanent Resident'),
                                                     ('Working Visa'),
                                                     ('Student Visa'),
                                                     ('Temporary Visa');
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS Zodiac (
                          ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          zodiac varchar UNIQUE NOT NULL
);
-- +goose StatementEnd
-- +goose StatementBegin
INSERT INTO Zodiac(zodiac) VALUES('Aries'),
                                   ('Aquarius'),
                                   ('Cancer'),
                                   ('Capricorn'),
                                   ('Gemini'),
                                   ('Leo'),
                                   ('Libra'),
                                   ('Pisces'),
                                   ('Sagittarius'),
                                   ('Scorpio'),
                                   ('Taurus'),
                                   ('Virgo');
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS MatchesStatus (
                                 ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                 status varchar UNIQUE NOT NULL
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS Features (
                            ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                            feature varchar UNIQUE NOT NULL
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS SubscriptionTypes (
                                     ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                     Type varchar UNIQUE NOT NULL
);
-- +goose StatementEnd
-- +goose StatementBegin
INSERT INTO SubscriptionTypes(Type) VALUES ('Free'),
                                               ('Pro'),
                                               ('Premium');
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS Subscription (
                                ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                TypeID integer,
                                Price integer NOT NULL,
                                Duration varchar NOT NULL
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS SubscriptionFeatures (
                                        ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                        SubscriptionID integer,
                                        FeaturesID integer
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS Users (
                        UID uuid PRIMARY KEY DEFAULT uuid_generate_v4 (),
                        FirstName varchar NOT NULL,
                        LastName varchar NOT NULL,
                        Email varchar UNIQUE NOT NULL,
                        UserName varchar UNIQUE NOT NULL,
                        Password varchar NOT NULL,
                        IsVerified bool NOT NULL DEFAULT false,
                        GoogleID varchar UNIQUE,
                        SubscriptionID integer DEFAULT 0,
                        CreatedAt timestamptz NOT NULL DEFAULT (now())
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS EmailOTP (
                        ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        UID uuid,
                        OTP integer NOT NULL,
                        CountOfDay integer NOT NULL,
                        CreatedAt timestamptz NOT NULL DEFAULT ( now()),
                        ExpiredAt timestamptz NOT NULL

    );
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS UserPhone (
                             ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                             UID uuid,
                             number integer NOT NULL,
                             IsVerified bool NOT NULL DEFAULT false,
                             OTP integer NOT NULL,
                             NextOTP timestamptz NOT NULL
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS UserDetails (
                               UDID integer PRIMARY KEY,
                               UID uuid,
                               Bio text NOT NULL,
                               DateOfBirth date NOT NULL,
                               Gender integer,
                               Child integer NOT NULL DEFAULT 0,
                               Siblings integer NOT NULL DEFAULT 0,
                               Height varchar NOT NULL,
                               Religion integer,
                               Caste integer,
                               Zodiac integer,
                               MaritalStatus integer,
                               HigherEducation integer,
                               Profession integer,
                               HomeCountry integer,
                               HomeState integer,
                               ResidingCountry integer,
                               ResidingState integer,
                               ResidingStatus integer,
                               CreatedAt timestamptz NOT NULL DEFAULT (now()),
                               UpdatedAt timestamptz NOT NULL DEFAULT (now())
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS Sessions (
                            ID uuid PRIMARY KEY,
                            UID uuid,
                            RefreshToken varchar NOT NULL,
                            UserAgent varchar NOT NULL,
                            ClientIP varchar NOT NULL,
                            DeviceID varchar NOT NULL,
                            IsBlocked bool NOT NULL DEFAULT false,
                            ExpiresAt timestamptz NOT NULL,
                            CreatedAt timestamptz NOT NULL DEFAULT (now())
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS FCToken (
                           ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                           UID uuid,
                           UserAgent varchar NOT NULL,
                           ClientIP varchar NOT NULL,
                           Token varchar NOT NULL,
                           CreatedAt timestamptz NOT NULL DEFAULT (now())
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS Matches (
                           ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                           SenderID uuid,
                           ReceiverID uuid,
                           StatusID integer,
                           IsRead bool NOT NULL DEFAULT false,
                           CreatedAt timestamptz NOT NULL DEFAULT (now()),
                           UpdatedAt timestamptz NOT NULL DEFAULT (now())
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS Block (
                         ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         UID uuid,
                         BlockedID uuid,
                         CreatedAt timestamptz NOT NULL DEFAULT (now()),
                         UpdatedAt timestamptz NOT NULL DEFAULT (now())
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS Favourite (
                             ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                             UserID uuid,
                             ProfileID uuid,
                             Favourite bool NOT NULL DEFAULT true,
                             IsRead bool NOT NULL DEFAULT false,
                             CreatedAt timestamptz NOT NULL DEFAULT (now()),
                             UpdatedAt timestamptz NOT NULL DEFAULT (now())
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS History (
                           ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                           UserID uuid,
                           ProfileID uuid,
                           VisitedTime integer NOT NULL,
                           IsRead bool NOT NULL DEFAULT false,
                           CreatedAt timestamptz NOT NULL DEFAULT (now()),
                           UpdatedAt timestamptz NOT NULL DEFAULT (now())
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS PaymentMethod (
                                 ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                 Method varchar NOT NULL
);
-- +goose StatementEnd
-- +goose StatementBegin
INSERT INTO PaymentMethod(Method) VALUES ('Esewa'),
                                               ('Khalti'),
                                               ('Stripe'),
                                               ('IME Pay');
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS Payment (
                           ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                           UID uuid,
                           Method integer,
                           SubscriptionID integer,
                           AmountPaid integer NOT NULL,
                           TxIDByPSP varchar NOT NULL,
                           TxIDBySanyukta varchar NOT NULL,
                           ExpiresAt timestamptz NOT NULL,
                           PaidAt timestamptz NOT NULL DEFAULT (now())
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS Message (
                           ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                           SenderID uuid,
                           ReceiverID uuid,
                           Data text NOT NULL,
                           CreatedAt timestamptz NOT NULL DEFAULT (now()),
                           UpdatedAt timestamptz NOT NULL DEFAULT (now())
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS MessageRead (
                               ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                               MessageID integer,
                               UID uuid
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS MessageDelete (
                                 ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                 MessageID integer,
                                 UID uuid
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS NotificationType (
                                    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                    Type varchar NOT NULL
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS NotificationStatus (
                                      ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                      Status varchar NOT NULL
);
-- +goose StatementEnd
-- +goose StatementBegin
CREATE TABLE IF NOT EXISTS Notification (
                                ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                UID uuid,
                                ProfileID uuid,
                                NotificationType integer,
                                NotificationMessage text,
                                IsRead bool NOT NULL DEFAULT false,
                                NotificationStatus integer,
                                CreatedAt timestamptz NOT NULL DEFAULT (now())
);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE State ADD FOREIGN KEY (CountryID) REFERENCES Country (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Subscription ADD FOREIGN KEY (TypeID) REFERENCES SubscriptionTypes (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE SubscriptionFeatures ADD FOREIGN KEY (SubscriptionID) REFERENCES Subscription (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE SubscriptionFeatures ADD FOREIGN KEY (FeaturesID) REFERENCES Features (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Users ADD FOREIGN KEY (SubscriptionID) REFERENCES Subscription (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE EmailOTP ADD FOREIGN KEY (UID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE UserPhone ADD FOREIGN KEY (UID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE UserDetails ADD FOREIGN KEY (UID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE UserDetails ADD FOREIGN KEY (Gender) REFERENCES Gender (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE UserDetails ADD FOREIGN KEY (Religion) REFERENCES Religion (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE UserDetails ADD FOREIGN KEY (Caste) REFERENCES Caste (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE UserDetails ADD FOREIGN KEY (Zodiac) REFERENCES Zodiac (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE UserDetails ADD FOREIGN KEY (MaritalStatus) REFERENCES MaritalStatus (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE UserDetails ADD FOREIGN KEY (HigherEducation) REFERENCES HigherEducation (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE UserDetails ADD FOREIGN KEY (Profession) REFERENCES Profession (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE UserDetails ADD FOREIGN KEY (HomeCountry) REFERENCES Country (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE UserDetails ADD FOREIGN KEY (HomeState) REFERENCES State (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE UserDetails ADD FOREIGN KEY (ResidingCountry) REFERENCES Country (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE UserDetails ADD FOREIGN KEY (ResidingState) REFERENCES State (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE UserDetails ADD FOREIGN KEY (ResidingStatus) REFERENCES ResidingStatus (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Sessions ADD FOREIGN KEY (UID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE FCToken ADD FOREIGN KEY (UID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Matches ADD FOREIGN KEY (SenderID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Matches ADD FOREIGN KEY (ReceiverID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Matches ADD FOREIGN KEY (StatusID) REFERENCES MatchesStatus (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Block ADD FOREIGN KEY (UID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Block ADD FOREIGN KEY (BlockedID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Favourite ADD FOREIGN KEY (UserID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Favourite ADD FOREIGN KEY (ProfileID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE History ADD FOREIGN KEY (UserID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE History ADD FOREIGN KEY (ProfileID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Payment ADD FOREIGN KEY (UID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Payment ADD FOREIGN KEY (Method) REFERENCES PaymentMethod (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Payment ADD FOREIGN KEY (SubscriptionID) REFERENCES Subscription (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Message ADD FOREIGN KEY (SenderID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Message ADD FOREIGN KEY (ReceiverID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE MessageRead ADD FOREIGN KEY (MessageID) REFERENCES Message (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE MessageRead ADD FOREIGN KEY (UID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE MessageDelete ADD FOREIGN KEY (MessageID) REFERENCES Message (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE MessageDelete ADD FOREIGN KEY (UID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Notification ADD FOREIGN KEY (UID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Notification ADD FOREIGN KEY (ProfileID) REFERENCES Users (UID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Notification ADD FOREIGN KEY (NotificationType) REFERENCES NotificationType (ID);
-- +goose StatementEnd
-- +goose StatementBegin
ALTER TABLE Notification ADD FOREIGN KEY (NotificationStatus) REFERENCES NotificationStatus (ID);
-- +goose StatementEnd


-- +goose Down
-- +goose StatementBegin
DROP TABLE IF EXISTS Gender;
-- +goose StatementEnd

-- +goose StatementBegin
DROP TABLE IF EXISTS MaritalStatus;
-- +goose StatementEnd
